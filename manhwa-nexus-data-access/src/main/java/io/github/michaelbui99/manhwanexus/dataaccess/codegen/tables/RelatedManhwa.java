/*
 * This file is generated by jOOQ.
 */
package io.github.michaelbui99.manhwanexus.dataaccess.codegen.tables;


import io.github.michaelbui99.manhwanexus.dataaccess.codegen.Keys;
import io.github.michaelbui99.manhwanexus.dataaccess.codegen.ManhwaNexus;
import io.github.michaelbui99.manhwanexus.dataaccess.codegen.tables.records.RelatedManhwaRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RelatedManhwa extends TableImpl<RelatedManhwaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>manhwa_nexus.related_manhwa</code>
     */
    public static final RelatedManhwa RELATED_MANHWA = new RelatedManhwa();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RelatedManhwaRecord> getRecordType() {
        return RelatedManhwaRecord.class;
    }

    /**
     * The column <code>manhwa_nexus.related_manhwa.manhwa1_id</code>.
     */
    public final TableField<RelatedManhwaRecord, Integer> MANHWA1_ID = createField(DSL.name("manhwa1_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>manhwa_nexus.related_manhwa.manhwa2_id</code>.
     */
    public final TableField<RelatedManhwaRecord, Integer> MANHWA2_ID = createField(DSL.name("manhwa2_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private RelatedManhwa(Name alias, Table<RelatedManhwaRecord> aliased) {
        this(alias, aliased, null);
    }

    private RelatedManhwa(Name alias, Table<RelatedManhwaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>manhwa_nexus.related_manhwa</code> table
     * reference
     */
    public RelatedManhwa(String alias) {
        this(DSL.name(alias), RELATED_MANHWA);
    }

    /**
     * Create an aliased <code>manhwa_nexus.related_manhwa</code> table
     * reference
     */
    public RelatedManhwa(Name alias) {
        this(alias, RELATED_MANHWA);
    }

    /**
     * Create a <code>manhwa_nexus.related_manhwa</code> table reference
     */
    public RelatedManhwa() {
        this(DSL.name("related_manhwa"), null);
    }

    public <O extends Record> RelatedManhwa(Table<O> child, ForeignKey<O, RelatedManhwaRecord> key) {
        super(child, key, RELATED_MANHWA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ManhwaNexus.MANHWA_NEXUS;
    }

    @Override
    public UniqueKey<RelatedManhwaRecord> getPrimaryKey() {
        return Keys.RELATED_MANHWA_PKEY;
    }

    @Override
    public List<ForeignKey<RelatedManhwaRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RELATED_MANHWA__RELATED_MANHWA_MANHWA1_ID_FKEY, Keys.RELATED_MANHWA__RELATED_MANHWA_MANHWA2_ID_FKEY);
    }

    private transient Manhwa _relatedManhwaManhwa1IdFkey;
    private transient Manhwa _relatedManhwaManhwa2IdFkey;

    /**
     * Get the implicit join path to the <code>manhwa_nexus.manhwa</code> table,
     * via the <code>related_manhwa_manhwa1_id_fkey</code> key.
     */
    public Manhwa relatedManhwaManhwa1IdFkey() {
        if (_relatedManhwaManhwa1IdFkey == null)
            _relatedManhwaManhwa1IdFkey = new Manhwa(this, Keys.RELATED_MANHWA__RELATED_MANHWA_MANHWA1_ID_FKEY);

        return _relatedManhwaManhwa1IdFkey;
    }

    /**
     * Get the implicit join path to the <code>manhwa_nexus.manhwa</code> table,
     * via the <code>related_manhwa_manhwa2_id_fkey</code> key.
     */
    public Manhwa relatedManhwaManhwa2IdFkey() {
        if (_relatedManhwaManhwa2IdFkey == null)
            _relatedManhwaManhwa2IdFkey = new Manhwa(this, Keys.RELATED_MANHWA__RELATED_MANHWA_MANHWA2_ID_FKEY);

        return _relatedManhwaManhwa2IdFkey;
    }

    @Override
    public RelatedManhwa as(String alias) {
        return new RelatedManhwa(DSL.name(alias), this);
    }

    @Override
    public RelatedManhwa as(Name alias) {
        return new RelatedManhwa(alias, this);
    }

    @Override
    public RelatedManhwa as(Table<?> alias) {
        return new RelatedManhwa(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RelatedManhwa rename(String name) {
        return new RelatedManhwa(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RelatedManhwa rename(Name name) {
        return new RelatedManhwa(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RelatedManhwa rename(Table<?> name) {
        return new RelatedManhwa(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
