/*
 * This file is generated by jOOQ.
 */
package io.github.michaelbui99.manhwanexus.dataaccess.codegen.tables;


import io.github.michaelbui99.manhwanexus.dataaccess.codegen.Keys;
import io.github.michaelbui99.manhwanexus.dataaccess.codegen.ManhwaNexus;
import io.github.michaelbui99.manhwanexus.dataaccess.codegen.tables.records.AlternateTitleRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AlternateTitle extends TableImpl<AlternateTitleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>manhwa_nexus.alternate_title</code>
     */
    public static final AlternateTitle ALTERNATE_TITLE = new AlternateTitle();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AlternateTitleRecord> getRecordType() {
        return AlternateTitleRecord.class;
    }

    /**
     * The column <code>manhwa_nexus.alternate_title.id</code>.
     */
    public final TableField<AlternateTitleRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>manhwa_nexus.alternate_title.title_language_id</code>.
     */
    public final TableField<AlternateTitleRecord, Integer> TITLE_LANGUAGE_ID = createField(DSL.name("title_language_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>manhwa_nexus.alternate_title.manhwa_id</code>.
     */
    public final TableField<AlternateTitleRecord, Integer> MANHWA_ID = createField(DSL.name("manhwa_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>manhwa_nexus.alternate_title.title</code>.
     */
    public final TableField<AlternateTitleRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(200), this, "");

    private AlternateTitle(Name alias, Table<AlternateTitleRecord> aliased) {
        this(alias, aliased, null);
    }

    private AlternateTitle(Name alias, Table<AlternateTitleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>manhwa_nexus.alternate_title</code> table
     * reference
     */
    public AlternateTitle(String alias) {
        this(DSL.name(alias), ALTERNATE_TITLE);
    }

    /**
     * Create an aliased <code>manhwa_nexus.alternate_title</code> table
     * reference
     */
    public AlternateTitle(Name alias) {
        this(alias, ALTERNATE_TITLE);
    }

    /**
     * Create a <code>manhwa_nexus.alternate_title</code> table reference
     */
    public AlternateTitle() {
        this(DSL.name("alternate_title"), null);
    }

    public <O extends Record> AlternateTitle(Table<O> child, ForeignKey<O, AlternateTitleRecord> key) {
        super(child, key, ALTERNATE_TITLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ManhwaNexus.MANHWA_NEXUS;
    }

    @Override
    public Identity<AlternateTitleRecord, Integer> getIdentity() {
        return (Identity<AlternateTitleRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AlternateTitleRecord> getPrimaryKey() {
        return Keys.ALTERNATE_TITLE_PKEY;
    }

    @Override
    public List<ForeignKey<AlternateTitleRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ALTERNATE_TITLE__ALTERNATE_TITLE_TITLE_LANGUAGE_ID_FKEY, Keys.ALTERNATE_TITLE__ALTERNATE_TITLE_MANHWA_ID_FKEY);
    }

    private transient TitleLanguage _titleLanguage;
    private transient Manhwa _manhwa;

    /**
     * Get the implicit join path to the
     * <code>manhwa_nexus.title_language</code> table.
     */
    public TitleLanguage titleLanguage() {
        if (_titleLanguage == null)
            _titleLanguage = new TitleLanguage(this, Keys.ALTERNATE_TITLE__ALTERNATE_TITLE_TITLE_LANGUAGE_ID_FKEY);

        return _titleLanguage;
    }

    /**
     * Get the implicit join path to the <code>manhwa_nexus.manhwa</code> table.
     */
    public Manhwa manhwa() {
        if (_manhwa == null)
            _manhwa = new Manhwa(this, Keys.ALTERNATE_TITLE__ALTERNATE_TITLE_MANHWA_ID_FKEY);

        return _manhwa;
    }

    @Override
    public AlternateTitle as(String alias) {
        return new AlternateTitle(DSL.name(alias), this);
    }

    @Override
    public AlternateTitle as(Name alias) {
        return new AlternateTitle(alias, this);
    }

    @Override
    public AlternateTitle as(Table<?> alias) {
        return new AlternateTitle(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AlternateTitle rename(String name) {
        return new AlternateTitle(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AlternateTitle rename(Name name) {
        return new AlternateTitle(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AlternateTitle rename(Table<?> name) {
        return new AlternateTitle(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Integer, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Integer, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
