/*
 * This file is generated by jOOQ.
 */
package io.github.michaelbui99.manhwanexus.dataaccess.codegen.tables;


import io.github.michaelbui99.manhwanexus.dataaccess.codegen.Keys;
import io.github.michaelbui99.manhwanexus.dataaccess.codegen.ManhwaNexus;
import io.github.michaelbui99.manhwanexus.dataaccess.codegen.tables.records.ManhwaTagRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ManhwaTag extends TableImpl<ManhwaTagRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>manhwa_nexus.manhwa_tag</code>
     */
    public static final ManhwaTag MANHWA_TAG = new ManhwaTag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ManhwaTagRecord> getRecordType() {
        return ManhwaTagRecord.class;
    }

    /**
     * The column <code>manhwa_nexus.manhwa_tag.manhwa_id</code>.
     */
    public final TableField<ManhwaTagRecord, Integer> MANHWA_ID = createField(DSL.name("manhwa_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>manhwa_nexus.manhwa_tag.tag_id</code>.
     */
    public final TableField<ManhwaTagRecord, Integer> TAG_ID = createField(DSL.name("tag_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private ManhwaTag(Name alias, Table<ManhwaTagRecord> aliased) {
        this(alias, aliased, null);
    }

    private ManhwaTag(Name alias, Table<ManhwaTagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>manhwa_nexus.manhwa_tag</code> table reference
     */
    public ManhwaTag(String alias) {
        this(DSL.name(alias), MANHWA_TAG);
    }

    /**
     * Create an aliased <code>manhwa_nexus.manhwa_tag</code> table reference
     */
    public ManhwaTag(Name alias) {
        this(alias, MANHWA_TAG);
    }

    /**
     * Create a <code>manhwa_nexus.manhwa_tag</code> table reference
     */
    public ManhwaTag() {
        this(DSL.name("manhwa_tag"), null);
    }

    public <O extends Record> ManhwaTag(Table<O> child, ForeignKey<O, ManhwaTagRecord> key) {
        super(child, key, MANHWA_TAG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ManhwaNexus.MANHWA_NEXUS;
    }

    @Override
    public UniqueKey<ManhwaTagRecord> getPrimaryKey() {
        return Keys.MANHWA_TAG_PKEY;
    }

    @Override
    public List<ForeignKey<ManhwaTagRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MANHWA_TAG__MANHWA_TAG_MANHWA_ID_FKEY, Keys.MANHWA_TAG__MANHWA_TAG_TAG_ID_FKEY);
    }

    private transient Manhwa _manhwa;
    private transient Tag _tag;

    /**
     * Get the implicit join path to the <code>manhwa_nexus.manhwa</code> table.
     */
    public Manhwa manhwa() {
        if (_manhwa == null)
            _manhwa = new Manhwa(this, Keys.MANHWA_TAG__MANHWA_TAG_MANHWA_ID_FKEY);

        return _manhwa;
    }

    /**
     * Get the implicit join path to the <code>manhwa_nexus.tag</code> table.
     */
    public Tag tag() {
        if (_tag == null)
            _tag = new Tag(this, Keys.MANHWA_TAG__MANHWA_TAG_TAG_ID_FKEY);

        return _tag;
    }

    @Override
    public ManhwaTag as(String alias) {
        return new ManhwaTag(DSL.name(alias), this);
    }

    @Override
    public ManhwaTag as(Name alias) {
        return new ManhwaTag(alias, this);
    }

    @Override
    public ManhwaTag as(Table<?> alias) {
        return new ManhwaTag(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ManhwaTag rename(String name) {
        return new ManhwaTag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ManhwaTag rename(Name name) {
        return new ManhwaTag(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ManhwaTag rename(Table<?> name) {
        return new ManhwaTag(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
