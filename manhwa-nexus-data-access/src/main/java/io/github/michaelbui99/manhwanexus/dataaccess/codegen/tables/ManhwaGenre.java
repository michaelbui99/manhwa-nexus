/*
 * This file is generated by jOOQ.
 */
package io.github.michaelbui99.manhwanexus.dataaccess.codegen.tables;


import io.github.michaelbui99.manhwanexus.dataaccess.codegen.Keys;
import io.github.michaelbui99.manhwanexus.dataaccess.codegen.ManhwaNexus;
import io.github.michaelbui99.manhwanexus.dataaccess.codegen.tables.records.ManhwaGenreRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ManhwaGenre extends TableImpl<ManhwaGenreRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>manhwa_nexus.manhwa_genre</code>
     */
    public static final ManhwaGenre MANHWA_GENRE = new ManhwaGenre();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ManhwaGenreRecord> getRecordType() {
        return ManhwaGenreRecord.class;
    }

    /**
     * The column <code>manhwa_nexus.manhwa_genre.manhwa_id</code>.
     */
    public final TableField<ManhwaGenreRecord, Integer> MANHWA_ID = createField(DSL.name("manhwa_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>manhwa_nexus.manhwa_genre.genre_id</code>.
     */
    public final TableField<ManhwaGenreRecord, Integer> GENRE_ID = createField(DSL.name("genre_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private ManhwaGenre(Name alias, Table<ManhwaGenreRecord> aliased) {
        this(alias, aliased, null);
    }

    private ManhwaGenre(Name alias, Table<ManhwaGenreRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>manhwa_nexus.manhwa_genre</code> table reference
     */
    public ManhwaGenre(String alias) {
        this(DSL.name(alias), MANHWA_GENRE);
    }

    /**
     * Create an aliased <code>manhwa_nexus.manhwa_genre</code> table reference
     */
    public ManhwaGenre(Name alias) {
        this(alias, MANHWA_GENRE);
    }

    /**
     * Create a <code>manhwa_nexus.manhwa_genre</code> table reference
     */
    public ManhwaGenre() {
        this(DSL.name("manhwa_genre"), null);
    }

    public <O extends Record> ManhwaGenre(Table<O> child, ForeignKey<O, ManhwaGenreRecord> key) {
        super(child, key, MANHWA_GENRE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ManhwaNexus.MANHWA_NEXUS;
    }

    @Override
    public UniqueKey<ManhwaGenreRecord> getPrimaryKey() {
        return Keys.MANHWA_GENRE_PKEY;
    }

    @Override
    public List<ForeignKey<ManhwaGenreRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MANHWA_GENRE__MANHWA_GENRE_MANHWA_ID_FKEY, Keys.MANHWA_GENRE__MANHWA_GENRE_GENRE_ID_FKEY);
    }

    private transient Manhwa _manhwa;
    private transient Genre _genre;

    /**
     * Get the implicit join path to the <code>manhwa_nexus.manhwa</code> table.
     */
    public Manhwa manhwa() {
        if (_manhwa == null)
            _manhwa = new Manhwa(this, Keys.MANHWA_GENRE__MANHWA_GENRE_MANHWA_ID_FKEY);

        return _manhwa;
    }

    /**
     * Get the implicit join path to the <code>manhwa_nexus.genre</code> table.
     */
    public Genre genre() {
        if (_genre == null)
            _genre = new Genre(this, Keys.MANHWA_GENRE__MANHWA_GENRE_GENRE_ID_FKEY);

        return _genre;
    }

    @Override
    public ManhwaGenre as(String alias) {
        return new ManhwaGenre(DSL.name(alias), this);
    }

    @Override
    public ManhwaGenre as(Name alias) {
        return new ManhwaGenre(alias, this);
    }

    @Override
    public ManhwaGenre as(Table<?> alias) {
        return new ManhwaGenre(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ManhwaGenre rename(String name) {
        return new ManhwaGenre(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ManhwaGenre rename(Name name) {
        return new ManhwaGenre(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ManhwaGenre rename(Table<?> name) {
        return new ManhwaGenre(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
